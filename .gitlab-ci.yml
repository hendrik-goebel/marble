image: ubuntu
before_script:
  # setup ssh
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - mkdir -p ~/.ssh
  - eval $(ssh-agent -s)
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  - ssh-add <(echo "$SSH_PRIVATE_KEY")

  # install rsync
  - apt-get update -qq && apt-get install -y -qq rsync

stages:
  - deploy

deploy:
  stage: deploy
  script:
    # deploy artifacts

    - tar -cvzf artifacts.tar.gz css js index.html .htaccess createsoundtable.php
    - rsync -r artifacts.tar.gz $SSH_LOGIN:$REMOTE_PATH/$PROJECT_KEY/
    - ssh $SSH_LOGIN mkdir -p $REMOTE_PATH/$PROJECT_KEY;
    - ssh $SSH_LOGIN mkdir -p $REMOTE_PATH/$PROJECT_KEY/master;
    - ssh $SSH_LOGIN mkdir -p $REMOTE_PATH/$PROJECT_KEY/release;
    - ssh $SSH_LOGIN tar -xvzf $REMOTE_PATH/$PROJECT_KEY/artifacts.tar.gz --directory $REMOTE_PATH/$PROJECT_KEY/release
    - ssh $SSH_LOGIN ln -s $REMOTE_PATH/$PROJECT_KEY/samples $REMOTE_PATH/$PROJECT_KEY/release/samples
    - ssh $SSH_LOGIN php $REMOTE_PATH/$PROJECT_KEY/release/createsoundtable.php
    - ssh $SSH_LOGIN rm $REMOTE_PATH/$PROJECT_KEY/backup -Rf;
    - ssh $SSH_LOGIN mv $REMOTE_PATH/$PROJECT_KEY/master $REMOTE_PATH/$PROJECT_KEY/backup;
    - ssh $SSH_LOGIN mv $REMOTE_PATH/$PROJECT_KEY/release $REMOTE_PATH/$PROJECT_KEY/master;
    - ssh $SSH_LOGIN rm $REMOTE_PATH/$PROJECT_KEY/artifacts.tar.gz
    - ssh $SSH_LOGIN $REMOTE_PATH/$PROJECT_KEY